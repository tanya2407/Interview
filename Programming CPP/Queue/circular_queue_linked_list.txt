#include<iostream>
#include<mutex>

class Node{
  public:
  int val;
  Node* next;

  public:
  Node(int v){
    val = v;
    next = nullptr;
  }
};

class MyCircularQueue {
private:
    Node* head;
    Node* tail;
    int capacity;
    int count;

public:
    MyCircularQueue(int k) {
        capacity = k;
        count = 0;
        head = nullptr;
        tail = nullptr;
    }
    
    bool enQueue(int value) {
        if(isFull())
          return false;
        Node *newnode = new Node(value);
        if(isEmpty()){
          head = tail = newnode;
        } else{
          tail->next = newnode;
          tail = newnode;
        }

        ++count;
        return true;
    }
    
    bool deQueue() {
      if(isEmpty()) return false;
      if(head == tail)
        head = tail = nullptr;
      else{
        head = head->next;
      }
      --count;
      return true;
    }
    
    int Front() {
      if(isEmpty()) return -1;
      return head->val;
    }
    
    int Rear() {
        if(isEmpty()) return -1;
        return tail->val;
    }
    
    bool isEmpty() {
        return count == 0;
    }
    
    bool isFull() {
      return count == capacity;
    }
  
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
